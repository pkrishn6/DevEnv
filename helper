!/bin/bash
function switch_branch {
    echo $SR_CODE_BASE
    cd $SR_CODE_BASE
    if [[ $1 == "" ]]; then
        echo "please specify the branch that you want to checkout"
        return
    fi
    for dir in *; do
        if [ $dir == "reltools" ]; then
            echo $dir
            cd $dir
            git checkout $1
        elif [ $dir == "snaproute" ]; then
            cd $dir/src
            for srcDir in */; do
                is_asicd_dir=false
                if [ $srcDir != "out/" ] && [ $srcDir != "vendors/" ] && [ $srcDir != "flexui/" ] && [ $srcDir != "opticd/" ]; then
                    echo $SR_CODE_BASE/$dir/src/$srcDir
                    cd $SR_CODE_BASE/$dir/src/$srcDir
                    if [ $srcDir == "flexSdk/" ]; then
                        git checkout .
                    elif [ $srcDir == "asicd/" ]; then
                        #revert_lfs_files
                        is_asicd_dir=true
                    fi
                    git checkout $1
                    if $is_asicd_dir; then
                        #git lfs fetch
                        #git lfs checkout
                        is_asicd_dir=false
                    fi
                    echo
                fi
            done
        fi
        cd $SR_CODE_BASE
    done
}

# checks if branch has something pending
function parse_git_dirty() {
  git diff --quiet --ignore-submodules HEAD 2>/dev/null; [ $? -eq 1 ] && echo "*"
}

# gets the current git branch
function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}
# get last commit hash prepended with @ (i.e. @8a323d0)
function parse_git_hash() {
  git rev-parse --short HEAD 2> /dev/null | sed "s/\(.*\)/@\1/"
}

# DEMO
GIT_BRANCH=$(parse_git_branch)$(parse_git_hash)

function build_all {
    cd $SR_CODE_BASE/snaproute/src
    if [ "$1" == "" ]; then
        make clean_all; make
    else
        make clean_all; make BUILD_TARGET=$1
    fi
    echo "Done Clean Build of WorkSpace"
    #cd $SR_CODE_BASE/snaproute/src
    #echo "Building cscope"
    #~/scripts/cscope_build
    #echo "Building TAGS"
    #~/scripts/tags_build
}

function run_ovsdb_docker {
    echo "pull socketplane ops"
    docker pull socketplane/openvswitch
    echo "start docker container"
    cid=$(docker run -itd --cap-add NET_ADMIN --name "ovsdb_test" socketplane/openvswitch)
    echo "cid: $cid"
}

function remove_ovsdb_docker {
    echo "KILL and remove OVSDB_TEST"
    docker kill "ovsdb_test"
    docker rm "ovsdb_test"
}

function mrg_branch {
    if [ "$1" == "" ]; then
        echo "specify branch you want to sync from"
    else
        cd $SR_CODE_BASE
        for dir in *; do
            if [ $dir == "snaproute" ]; then
                cd $dir/src
                for srcDir in */; do
                    if [ $srcDir != "out/" ] && [ $srcDir != "flexSdk/" ] && [ $srcDir != "vendors/" ] && [ $srcDir != "flexui/" ] && [ $srcDir != "opticd/" ]; then
                        cd $SR_CODE_BASE/$dir/src/$srcDir
                        repo=${srcDir///}
                        echo "Syncing $(parse_git_branch) to $1 for $repo"
                        git merge --no-ff upstream/$1
                        git commit -s --amend
                        git push origin $(parse_git_branch)
                    fi
                done
            fi
            cd $SR_CODE_BASE
        done
    fi
}

function jen_ssh() {
    ssh jenkins@192.168.100.3
}

function build_ssh() {
    ssh builder@192.168.100.33
}

function fs_cp() {
    #scp $1 root@10.1.10.$2:$1
    scp $1 root@192.168.100.$2:$1
}

function fs() {
    #ssh root@10.1.10.$1
    ssh root@192.168.100.$1
}


function d_cp() {
    scp $SR_CODE_BASE/snaproute/src/out/bin/$1 root@192.168.100.$2:/opt/flexswitch/bin
    #scp $SR_CODE_BASE/snaproute/src/out/bin/$1 root@10.1.10.$2:
}

function botsvr() {
    ssh builduser@10.1.10.203
}

function build_tags() {
    cd $SR_CODE_BASE
    ~/scripts/tags_build
    cd -
}

function bcm_shell() {
    #rlwrap nc 10.1.10.$1 40000
    rlwrap nc 192.168.100.$1 40000
}

function fs_cli() {
    cd $SR_CODE_BASE/snaproute/src/apps/cli2
    source env.sh
    #./snap_cli.py -s 10.1.10.$1
    ./snap_cli.py -s 192.168.100.$1 -p 2022
}

function gen_pkg_build() {
    cd $SR_CODE_BASE/reltools
    python makePkg.py
    build_all $1
}
